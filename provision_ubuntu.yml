---
- name: Stage instance(s)
  hosts: local
  connection: local
  gather_facts: false

  vars:
      keyname: yourkey
      instance_type: t2.micro
      security_group: default
      region: us-east-1
      vpc_subnet_id: yoursubnetid
      assign_public_ip: yes
      tag_name: yourtag
      image_id: "{{ imageid }}"
  #Launch 'count' number of Ubuntu instances with the following parameters. Register the output.

  tasks:
    - name: Launch instance 
      ec2:
        group: "{{security_group}}"
        instance_type: "{{instance_type}}"
        image: "{{ image_id }}"
        region: "{{region}}"
        key_name: "{{keyname}}"
        vpc_subnet_id: "{{vpc_subnet_id}}"
        wait: true
        private_ip: "{{ private_ip }}"
        count: 1
        instance_tags:
          Name: "{{ tag_name }}"
      register: ec2
    
    # Use with_items to add each instances public IP to a new hostgroup for use in the next play.
    - name: Add new instances to host group
      add_host: hostname={{item.public_ip}} groups={{tag_name}}
      with_items: ec2.instances

    - name: Add entry to /etc/hosts
      lineinfile: dest=/etc/hosts line="{{ item.public_ip }} server1"
      with_items:
        - "{{ ec2.instances }}"
      ignore_errors: true

    - name: Wait for the instances to boot by checking the ssh port
      wait_for: host={{item.public_ip}} port=22 delay=30 timeout=360 state=started
      with_items: ec2.instances
    
 
# This play targets the new host group
- name: Configure instance
  hosts: "{{ tag_name }}"
  user: ubuntu
  sudo: yes
  vars:
    tag_name: yourtag
  # Do some stuff on each instance ....

  tasks:
    - name: Add to IP to /etc/hosts on remote server
      lineinfile: dest=/etc/hosts line="{{ec2_private_ip_address}} {{ansible_hostname}}"
 
    - name: Add EDITOR environment variable
      lineinfile: dest=/etc/profile line='export EDITOR=vim'

    - name: Add users
      user: name={{ item.name }} state=present uid={{ item.uid }} shell=/bin/bash
      with_items:
        - { name: 'daniel', uid: 600 }
      tags:
        - adduser

    - name: Add user keys
      authorized_key: user=daniel
                  key="{{ lookup('file', '/home/daniel/.ssh/id_rsa.pub') }}"
      tags:
        - adduser

    - name: Copy sudoers file
      copy: src=sudoers dest=/etc/sudoers backup=yes
      tags:
        - copyfile
    - name: update apt cache
      apt: update_cache=yes

    - name: Install packages
      apt: pkg={{ item }} state=latest
      with_items:
        - vim
        - ntp
        - python-setuptools
        - jq
        - telnet
        - git
        - lynx
      tags:
        - installpkg
